[project]
name = "dirdigest"
version = "0.1.0"
description = "Recursively processes directories and files, creating a structured digest for LLM context ingestion."
authors = [
    { name = "Your Name", email = "your.email@example.com" }, # Replace with your details
]
requires-python = ">=3.8"
license = { text = "MIT" } # Or your preferred license

dependencies = [
    "click>=8.0",
    "rich>=13.0",
    "pyperclip>=1.8",
    "PyYAML>=6.0",
]

[project.scripts]
dirdigest = "dirdigest.cli:main_cli"

# Added section for optional development dependencies
[project.optional-dependencies]
dev = [
    "ruff",      # For linting and formatting
    "black",     # For opinionated code formatting
    "pytest",    # For running tests (if you use the test suite we outlined)
    "mypy",      # Optional: for stricter static type checking later
    # Add other dev tools here if needed, e.g., coverage
]

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."] 
include = ["dirdigest*"]

# Optional: Add configurations for ruff and black if you want them in pyproject.toml
# These are examples, adjust to your preferences.
# If you don't add these, ruff and black will use their sensible defaults.
# [tool.ruff]
# line-length = 88
# select = [
#     "E",  # pycodestyle errors
#     "F",  # Pyflakes
#     "W",  # pycodestyle warnings
#     "I",  # isort (import sorting)
#     "UP", # pyupgrade
#     "C90",# McCabe complexity
#     # Add more codes as desired, e.g., "B" for flake8-bugbear
# ]
# ignore = []
# fixable = ["ALL"] # Select all fixable rules for --fix

# [tool.ruff.lint.isort]
# known-first-party = ["dirdigest"]

# [tool.black]
# line-length = 88
# target-version = ['py38', 'py39', 'py310', 'py311', 'py312'] # Specify target Python versions

[tool.pytest.ini_options]
minversion = "6.0" # Or your desired minimum pytest version
addopts = "-ra -q --color=yes" # Optional: common addopts
testpaths = [
    "tests", # Tells pytest where to start looking for tests
]
# Add or modify this line:
norecursedirs = ".git .venv __pycache__ build dist *.egg-info node_modules tests/fixtures" 
# If you had other dirs in norecursedirs, keep them and add tests/fixtures.
# Using "tests/fixtures" is good. If you only want to ignore the problematic sub-part, 
# you could do "tests/fixtures/test_dirs", but ignoring the whole "tests/fixtures" 
# from collection scanning is safer as it's all data.


# [tool.mypy]
# python_version = "3.8"
# warn_return_any = true
# warn_unused_configs = true
# ignore_missing_imports = true # Useful initially, can be made stricter
# # Add paths to check if not default
# files = ["dirdigest/"]